from gc import callbacks
from account_bot.config import ADMIN_IDS, Review, BOT_TOKEN, chat_admin
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery,InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards.inline import  main_menu_keyboard, category_keyboard,get_account_actions_keyboard,get_accounts_keyboard,get_payment_keyboard
from database.db import get_accounts_by_category
from database.db import get_account_by_id
from aiogram.exceptions import TelegramBadRequest
from keyboards.inline import admin_decision_keyboard
from account_bot.keyboards.reply import main_menureply_keyboard
from account_bot.utils.language import get_lang

class FeedbackStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_media = State()

class PaymentStates(StatesGroup):
    waiting_for_screenshot = State()




router = Router()

async def show_account_by_index(message: Message, state: FSMContext):
    data = await state.get_data()
    accounts = data["accounts"]
    index = data["acc_index"]
    lang = data.get("lang", "ru")

    if index < 0 or index >= len(accounts):
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    acc = accounts[index]
    acc_id = acc["id"]
    login = acc["login"]
    price_som = acc["price_som"]
    price_rub = acc["price_rub"]
    description = acc["description"]
    media_id = acc.get("media_id")
    media_type = acc.get("media_type")

    text = (
        f"üîê <b>–õ–æ–≥–∏–Ω:</b> {login}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_som}–°–æ–º / {price_rub}–†—É–±–ª—å \n"
        f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
        f"üì¶ <b>–ê–∫–∫–∞—É–Ω—Ç {index + 1} –∏–∑ {len(accounts)}</b>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="acc_prev") if index > 0 else InlineKeyboardButton(
                text=" ",callback_data="ignore"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data="acc_next") if index < len(accounts) - 1 else InlineKeyboardButton(
                text=" ",callback_data="ignore")],
        [InlineKeyboardButton(text="üõí –í—ã–±—Ä–∞—Ç—å", callback_data=f"pay_account:{acc_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_categories")]
    ])

    if media_type == "photo":
        await message.answer_photo(photo=media_id, caption=text, reply_markup=keyboard)
    elif media_type == "video":
        await message.answer_video(video=media_id, caption=text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_data({"lang": "ru"})
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menureply_keyboard())

@router.callback_query(F.data == "view_categories")
async def view_categories(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    title = "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä"
    markup = category_keyboard(lang)

    if callback.message.text:
        await callback.message.edit_text(title, reply_markup=markup)
    else:
        await callback.message.edit_reply_markup(reply_markup=markup)
        await callback.message.answer(title, reply_markup=markup)

    await callback.answer()
@router.message(lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def MainMenu(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",reply_markup=main_menu_keyboard())

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")

    try:
        await callback.message.delete()
        await callback.message.answer(
            get_message(lang, "main_menu"),
            reply_markup=main_menu_keyboard(lang)
        )
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é.")
    else:
        await callback.answer()


@router.callback_query(F.data.startswith("cat_"))
async def show_accounts(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[-1]
    lang = await get_lang(callback.from_user.id)
    accounts = await get_accounts_by_category(category)

    if not accounts:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return
    await state.update_data(accounts=accounts, acc_index=0, acc_category=category)
    await show_account_by_index(callback.message, state)

@router.callback_query(F.data == "acc_next")
async def next_account(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data.get("acc_index", 0) + 1
    await state.update_data(acc_index=index)
    await callback.message.delete()
    await show_account_by_index(callback.message, state)


@router.callback_query(F.data == "acc_prev")
async def prev_account(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data.get("acc_index", 0) - 1
    await state.update_data(acc_index=index)
    await callback.message.delete()
    await show_account_by_index(callback.message, state)


@router.callback_query(F.data == "ignore")
async def ignore_callback(callback: CallbackQuery):
    await callback.answer()

@router.callback_query(F.data.startswith("pay_account:"))
async def select_account(callback: CallbackQuery):
    parts = callback.data.split(":")
    if len(parts) < 2 or not parts[1].isdigit():
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–∫–∫–∞—É–Ω—Ç–∞.")
        return

    acc_id = int(parts[1])
    lang = await get_lang(callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ ID
    accounts = list(await get_accounts_by_category("pubg")) + list(await get_accounts_by_category("ml"))
    account = next((acc for acc in accounts if acc["id"] == acc_id), None)

    if not account:
        await callback.message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    acc_id = account["id"]
    category = account["category"]
    login = account["login"]
    password = account["password"]
    price_som = account["price_som"]
    price_rub = account["price_rub"]
    description = account["description"]

    text = f"<b>{category.upper()}</b>\n–¶–µ–Ω–∞: {price_som}–°–æ–º/{price_rub}–†—É–±–ª—å\n–õ–æ–≥–∏–Ω: <code>{login}</code>\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pa_account:{acc_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_categories")]
    ])
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest:
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("pa_account:"))
async def start_payment(callback: CallbackQuery, state: FSMContext):
    acc_id = int(callback.data.split(":")[1])
    lang = await get_lang(callback.from_user.id)

    await state.update_data(acc_id=acc_id, lang=lang)

    text = (
        "üí∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞</b> –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞ –Ω–æ–º–µ—Ä: <code>+996 XXX XXX XXX</code>\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞."
    )
    await callback.message.edit_text(text)
    await state.set_state(PaymentStates.waiting_for_screenshot)

@router.message(PaymentStates.waiting_for_screenshot)
async def handle_payment_screenshot(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.")
        return

    data = await state.get_data()
    acc_id = data.get("acc_id")
    lang = data.get("lang", "ru")

    account = await get_account_by_id(acc_id)

    if not account:
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    account_data = f"{account['login']}|{account['password']}|{account.get('binding', 'N/A')}"

    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQL
    account_dict = {
        "id": account["id"],
        "category": account["category"],
        "login": account["login"],
        "password": account["password"],
        "price_som": account["price_som"],
        "price_rub": account["price_rub"],
        "description": account["description"]
    }

    caption = (
        f"üßæ –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç @{message.from_user.username or message.from_user.id}\n"
        f"üéÆ –ò–≥—Ä–∞: {account_dict['category'].upper()}\n"
        f"üÜî ID: {account_dict['id']}\n"
        f"üë§ –õ–æ–≥–∏–Ω: <code>{account_dict['login']}</code>\n"
        f"üîë –ü–∞—Ä–æ–ª—å: <code>{account_dict['password']}</code>\n"
        f"üí∞ –¶–µ–Ω–∞: {account_dict['price_som']} \n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {account_dict['description']}"
    )

    for admin_id in chat_admin if isinstance(chat_admin, list) else [chat_admin]:
        await message.bot.send_photo(
            chat_id=chat_admin,
            photo=message.photo[-1].file_id,
            caption=caption,
            reply_markup=admin_decision_keyboard(
                message.from_user.id,
                account_data
            )
        )

    await message.answer(
        "‚úÖ –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    await state.clear()


@router.callback_query(F.data == "leave_review")
async def start_review_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer ("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    await state.set_state(FeedbackStates.waiting_for_text)
    await callback.answer()

@router.message(FeedbackStates.waiting_for_text, F.text)

async def get_review_text(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.")
        return

    await state.update_data(review_text=text)

    skip_btn = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_media")]
    ])

    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'", reply_markup=skip_btn)
    await state.set_state(FeedbackStates.waiting_for_media)

Bot = BOT_TOKEN
@router.message(FeedbackStates.waiting_for_media, F.photo | F.video)
async def get_review_media(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    username = message.from_user.username or f"id:{message.from_user.id}"
    review_text = f"üë§ @{username}\n\n" + data.get("review_text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
    channel_id = Review  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à

    if message.photo:
        file_id = message.photo[-1].file_id
        await bot.send_photo(channel_id, file_id, caption=review_text)
    elif message.video:
        file_id = message.video.file_id
        await bot.send_video(channel_id, file_id, caption=review_text)

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    await state.clear()

@router.callback_query(F.data == "skip_media", FeedbackStates.waiting_for_media)
async def skip_media_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    username = callback.from_user.username or f"id:{callback.from_user.id}"
    review_text = f"üë§ @{username}\n\n" + data.get("review_text", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
    channel_id = Review

    await bot.send_message(channel_id, review_text)
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
    await state.clear()
    await callback.answer()


@router.callback_query(F.data.startswith("account_"))
async def show_account_options(callback: CallbackQuery, state: FSMContext):
    account_id = int(callback.data.split("_")[1])
    data = await state.get_data()
    lang = data.get("lang", "ru")

    await callback.message.edit_text(
        text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=get_payment_keyboard(account_id, lang)
    )

@router.callback_query(F.data.startswith("approve:"))
async def approve_user(callback: CallbackQuery):
    _, user_id, acc_data = callback.data.split(":", 2)

    try:
        login, password, binding = acc_data.split("|")
        message = (
            "‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n\n"
            f"üîê –õ–æ–≥–∏–Ω: {login}\n"
            f"üîë –ü–∞—Ä–æ–ª—å: {password}\n"
            f"üîó –ü—Ä–∏–≤—è–∑–∫–∞: {binding}"
        )
        await callback.bot.send_message(int(user_id), message)
        await callback.message.edit_caption("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    except TelegramBadRequest:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", show_alert=True)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", show_alert=True)

@router.callback_query(F.data.startswith("reject:"))
async def reject_user(callback: CallbackQuery):
    _, user_id = callback.data.split(":")

    try:
        await callback.bot.send_message(int(user_id), "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await callback.message.edit_caption("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except TelegramBadRequest:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", show_alert=True)
