from aiogram import Router
from config import ADMIN_IDS,BOT_TOKEN
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from keyboards.inline import admin_panel_keyboard,get_category_keyboard
from utils.language import get_message
from states.add_account import AddAccountState
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from database.db import insert_account
from database.db import delete_account_by_id,get_all_accounts  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å—Ç—å
from handlers.is_admin import IsAdmin
import re
router = Router()
def extract_price(text: str) -> int | None:
    clean = re.sub(r"[^\d.,]", "", text)

    if "," in clean and "." not in clean:
        clean = clean.replace(",", ".")

    try:
        float_price = float(clean)
        return int(float_price)
    except ValueError:
        return None
@router.message(Command("admin"), IsAdmin())
async def admin_panel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_keyboard())

@router.callback_query(F.data == "add_account")
async def start_adding_account(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return
    data = await state.get_data()
    lang = data.get("lang", "ru")
    await state.set_state(AddAccountState.choosing_category)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: pubg –∏–ª–∏ ml",reply_markup=get_category_keyboard(lang))

@router.callback_query(F.data == "confirm_add_account")
async def confirm_account(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data["category"]
    login = data["login"]
    password = data["password"]
    price_som = data["price_som"]
    price_rub = data["price_rub"]
    binding = data["binding"]
    description = data["description"]
    media_id = data.get("media_id")
    media_type = data.get("media_type")
    binding = data.get("binding")
    # –≤—Å—Ç–∞–≤–∫–∞ –≤ –ë–î
    await insert_account(category, login, password, price_som,price_rub, description, binding, media_id, media_type)

    await callback.message.answer("–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    msg = "üìä –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."
    await callback.message.edit_text(msg, reply_markup=admin_panel_keyboard(lang))

from states.add_account import AddAccountState
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

@router.callback_query(F.data.startswith("acc_cat_"))
async def set_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[-1]
    await state.update_data(category=category)
    await state.set_state(AddAccountState.entering_login)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")

@router.message(AddAccountState.entering_login)
async def get_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await state.set_state(AddAccountState.entering_password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@router.message(AddAccountState.entering_password)
async def get_password(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    await state.set_state(AddAccountState.entering_price_som)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ <b>—Å–æ–º–∞—Ö</b>:")
@router.message(AddAccountState.entering_price_som)
async def get_price_som(message: Message, state: FSMContext):
    if not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –¥–ª—è —Å–æ–º–æ–≤.")
        return
    await state.update_data(price_som=int(message.text.strip()))
    await state.set_state(AddAccountState.entering_price_rub)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ <b>—Ä—É–±–ª—è—Ö</b>:")
@router.message(AddAccountState.entering_price_rub)
async def get_price_rub(message: Message, state: FSMContext):
    if not message.text.strip().isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –¥–ª—è —Ä—É–±–ª–µ–π.")
        return
    await state.update_data(price_rub=int(message.text.strip()))
    await state.set_state(AddAccountState.entering_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:")


@router.message(AddAccountState.entering_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–£–∫–∞–∂–∏, —á–µ—Ä–µ–∑ —á—Ç–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: Google, Facebook, Email –∏ —Ç.–¥.)")
    await state.set_state(AddAccountState.entering_binding)

@router.message(AddAccountState.entering_binding)
async def get_binding(message: Message, state: FSMContext):
    await state.update_data(binding=message.text)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
    await state.set_state(AddAccountState.uploading_media)

@router.message(AddAccountState.uploading_media, F.photo | F.video)
async def handle_media(message: Message, state: FSMContext):
    media_id = None
    media_type = None

    if message.photo:
        media_id = message.photo[-1].file_id
        media_type = "photo"
    elif message.video:
        media_id = message.video.file_id
        media_type = "video"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        return

    await state.update_data(media_id=media_id, media_type=media_type)
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞. ‚úÖ", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="confirm_add_account")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_account")]
    ]))
    await state.set_state(AddAccountState.confirming)



@router.message(AddAccountState.entering_description)
async def get_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()

    from database.db import add_account
    await add_account(
        category=data['category'],
        login=data['login'],
        password=data['password'],
        price=data['price'],
        description=data['description']
    )

    await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

@router.callback_query(F.data == "delete_account")
async def delete_account_prompt(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    accounts = await get_all_accounts()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (id, category, login, price)
    if not accounts:
        return await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=admin_panel_keyboard())

    buttons = [
        [InlineKeyboardButton(
            text=f"{cat.upper()} | {login} | {price_som}–°–æ–º | {price_rub}–† ",
            callback_data=f"del_acc:{acc_id}"
        )] for acc_id, cat, login, price_som, price_rub in accounts
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@router.callback_query(F.data.startswith("del_acc:"))
async def delete_selected_account(callback: CallbackQuery):
    acc_id = int(callback.data.split(":")[1])
    await delete_account_by_id(acc_id)  # –§—É–Ω–∫—Ü–∏—è –∏–∑ db.py
    await callback.message.edit_text(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å ID {acc_id} —É–¥–∞–ª—ë–Ω.", reply_markup=admin_panel_keyboard())
@router.callback_query(F.data == "admin_menu")
async def ba_to_admin_menu(callback: CallbackQuery):
    await callback.message.edit_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_keyboard())

@router.callback_query(F.data == "manage_categories")
async def manage_categories(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    msg = "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ." if lang == "ru" else "üìÇ Category management is not available yet."
    await callback.message.edit_text(msg, reply_markup=admin_panel_keyboard(lang))

@router.callback_query(F.data == "view_reviews")
async def view_reviews(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    msg = "üí¨ –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π." if lang == "ru" else "üí¨ User reviews will be displayed here."
    await callback.message.edit_text(msg, reply_markup=admin_panel_keyboard(lang))

@router.callback_query(F.data == "back_to_user_menu")
async def back_to_user_menu(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    from keyboards.inline import main_menu_keyboard
    from utils.language import get_message
    await callback.message.edit_text(get_message(lang, "main_menu"), reply_markup=main_menu_keyboard(lang))
